name: Economic Analysis

on:
  workflow_dispatch:
    inputs:
      steps:
        description: 'Comma-separated list of steps to perform (e.g., gather_data,reanalyze_data,generate_short_pdf,generate_long_pdf)'
        required: true
        type: string
      priorities:
        description: 'Comma-separated list of priorities corresponding to steps (e.g., 1,2,3,4)'
        required: true
        type: string
      country_code:
        description: 'Country code for data gathering'
        required: true
        type: string
      years:
        description: 'Number of years for data gathering'
        required: true
        type: integer

jobs:
  run-script:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install aiohttp openai pymongo pandas matplotlib fpdf reportlab

      - name: Run selected steps
        id: run_steps
        run: |
          python -c "
import json
from economic_analysis_app import gather_data, reanalyze_data_process, generate_short_pdf, generate_long_pdf

steps = '${{ github.event.inputs.steps }}'.split(',')
priorities = list(map(int, '${{ github.event.inputs.priorities }}'.split(',')))
country_code = '${{ github.event.inputs.country_code }}'
years = ${{ github.event.inputs.years }}

step_priority = dict(zip(steps, priorities))
sorted_steps = [step for step, _ in sorted(step_priority.items(), key=lambda item: item[1])]

def execute_step(step, params):
    if step == 'gather_data':
        result = gather_data(params['country_code'], params['years'])
        print('Gather Data Result:', result)
    elif step == 'reanalyze_data':
        result = reanalyze_data_process()
        print('Reanalyze Data Result:', result)
    elif step == 'generate_short_pdf':
        summary_text = params.get('summary_text', 'Sample summary text')
        pdf_output = generate_short_pdf(summary_text)
        with open('short_report.pdf', 'wb') as f:
            f.write(pdf_output.getvalue())
    elif step == 'generate_long_pdf':
        economic_data = params.get('economic_data', {})
        graphs = params.get('graphs', {})
        pdf_path = generate_long_pdf(economic_data, graphs)
        print('Long PDF generated:', pdf_path)
    else:
        print(f'Unknown step: {step}')

params = {
    'country_code': country_code,
    'years': years,
    'summary_text': 'Sample summary text',
    'economic_data': '{}',
    'graphs': '{}'
}

for step in sorted_steps:
    execute_step(step, params)
        "

      - name: Upload short PDF
        if: ${{ github.event.inputs.steps contains 'generate_short_pdf' }}
        uses: actions/upload-artifact@v3
        with:
          name: short_report
          path: short_report.pdf

      - name: Upload long PDF
        if: ${{ github.event.inputs.steps contains 'generate_long_pdf' }}
        uses: actions/upload-artifact@v3
        with:
          name: long_report
          path: long_report.pdf
